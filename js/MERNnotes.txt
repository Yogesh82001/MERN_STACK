i####CLASS===>>01 saturday ##############

javascript--->>
===========
------IN CLASSROOM-------------

. script  small program 
. inspried by java
. live script first name
. nextscap company made livescript
. branden eich ,screem and self language expert 1995
. functional programming based client side 
. real name ECMAScript 
. vbscript microsoft 
. support all browsers
. compile and interprate 
. scheme and self perl and python language mother of javascript
. nodejs run time enviroment server side
. client side browsers
. loosely typed language 
. dynamically typed language 
. function is no.1 citizen in javascript

step of write code in web browser (chrome)->
------------------------------------

.about:blank
.inspect
.consol

variable diclartion->
---------------
> var a;
.typeof a; (operator)

>a=10;
> typeof a;
< number

> a=Number.MAX+SAFE_INTEGER;
< 9007199254740992

var b=9007199254740992n;(bigint)

bigint-->>
=======

.bigint+bigint - right
.bigint+another - X wrong



> var n=55/0;
< infinity

n+s=s
s+n=s
n+n=n

.10-"10";
.subtract kr dega
."yogi"-"panchal"
.NaN (not a number) illegal result not be praduce number

> 10+NaN;
< NaN

> 10+infinity;
< infinity

> parseInt("10")+5;(for typecast /conversion )
15

> parseFloat("10.0")+5;(for typecast /conversion )
< 15.0


.no char only string
> name.length;(find the length)
. string behav like an object


. `` for multiline string 
. shift + enter for next line 


.console.log()(for print the value like System.out,println)
.consol =object
.log=function

.string interpolotion

>a=true;
> typeof a;
< boolen

>10+true;
<11
.null-->
------
jab address nhi rakhte  tab ham null use krte h

var arr=[10,20,30];
> typeof arr;
< boject;

> arr=null;
< true(besause both type is object)

.null=value type

> typeof null;
> object

Number->
-----

1.0-9
           - Success value
2.Decimal

3.infinity  - error value


> var a=10;
> var b=20;
> var s="A is ${a} and B is ${b}"----(string interpolation)
< A is 10 and B is 20


N+B=N
B+N=N
N+N=N
B+B=B


N+undefined=NaN
N+infinity=infinity
N+NaN=NaN
NaN+NaN=NaN

symbol--->
===========

interduce in 2015  ES6
to genertae unique or return unique
vary rare to use
map->key-unique
   ->value
value type and primitive type datatype is---->

1.number
2.bigint
3.string
4.boolean
5.null
6.undefined
7.symbol


> undefined==null;(lossy compairison)
< true

> typeof undefined;
< undefined

> typeof null;
< object

10+undefined=NaN
10+null=10
10-null=10
10+true=11
10-false=9

> 10=="10";(lossy compairison)
< true
lossy compairison---->>(==)
=================
L.H.S=R.H.S
1.conversion("10" internaly)
2.comparision

strict compairison-->(===)
=================
1. type check
2. if type are same then value compair

> undefined===null;
< false
> 10==="10";
< false 

undefined-power high
null-power low


Referal Data Type ---->
=================


.Reference values that refer to objects.
.JS engine allocate memory in Heap for this type of Data
.Array ->
       arr = [10,20,20];
    arr contains the reference of array [10,20,20]
            
        
.Type Cast--->
==========

.parseInt()
.parseFloat()
    










----------WELL MENTAINED------


Source {
    -- Book: Speaking With JavaScript
    -- Web: Mdn Reference
}
Class 1{
    --JS Facts{
        --Js is a Scripting language
        --Scripting is small or light weight
        --JS is functional based programming language
        --Brenden Eich Built js in 10 days
        --Firstly called js as livescript
        --From 1995 livescript called as JavaScript
        --Official name of js today is ECMAScript
        --Every Browser has there JS engine which compile and run the JS on browser
        --Because every browser have different so js can behave differently in every device
        --JavaScript Borrowed from Scheme(General Purpose programming language), AWK(First Class Function),Self(Prot)
        --JS is loosely type lang
    } 
    --Data Type{
        --primitive data type {
            -1-number{
                --int,float,short,long all are numbers
                --this data type can contain 64 bit number
                --Success Value (0 to 9 , Decimal number)
                --Failure Value (Infinity , NaN) (number/0)
                --NaN (Not a Number)
                --number + string = string
                --number - string = Number
                --number + boolean = number
                --number + undefined = NaN
                --number + infinity = infinity
                --string interpolation (use ${a} inside string to dynamically render a inside string)
            }
            -2-bigint{
                --20000n is a bigint number 
                --bigint can be operated with bigint only
            }
            -3-string
            -4-boolean {
                --number + boolean = number
            }
            -5-null {
                --it is a Value
                --if address is not present the value is assigned null to an object only because object contains reference
                --typeof undefined (undefined)
                --typeof null (object) 
                --null == undefined (true , But == is a loose compairison , "==" it first convert easy prey to different thenn compare)
                --null === undefined (false, === is a strict compairision , First check the type then compare the value)
            }
            -6-symbol{
                --return unique
            }
            -7-undefined
        }
        --Referal Data Type {
            --Reference values that refer to objects.
            --JS engine allocate memory in Heap for this type of Data
            --Array {
                -- arr = [10,20,20];
                -- arr contains the reference of array [10,20,20]
            }
        }
    }
    --Type Cast{
        --parseInt()
        --parseFloat()
    }
    --Loose Compairision(==){
        -- First convert 
        -- then compare the value
        -- example {
            --10 == "10"  
            --return true 
            --because first == it convert to 10 (number) to string then compare with "10" (string)
        }  
    }
    --Strict Comparision (===){
        -- First type check 
        -- then compare the value
        -- example {
            --10 == "10"  
            --return false 
            --because first === it checks the type of 10 that is number  and "10" that is string so it type checks and get different so it exits without checking value and gives false
        }
    }
}






########## CLASS 2 SUNDAY   ##########################


> var a=10;
> var b=a;
. a value copy into A
> ++b;
. value type is also immutable type
. original never change whenever you do a change it do change in copy
. x=x+5;
. first make copy then reassine 
> var arr=[10,20,30];refferal type 
> var arr2=arr;
. copy the adress of arr an assine into arr2 
. referal type is mutable type
> arr2==arr;
< true
> arr2===arr;
< true
> arr2[0]=100;
> arr2=[100,20,30]
> arr=[100,20,30]
. how to convert mutable type into immutable type(array cloning)
> var arr3=[...arr];
. spred operator(...)

 

.referance type/mutable-->
1.Array[]
2.object{}








> var c=[a,b];
> c[0][0]=10;(2D array)
> var d=[...a,...b];(flat arrray)

> "hello".includes(e);
< true;

 
> var obj={};
> typeof obj;
< object

> var t=[];
> typeof t;
< object

. array access by index , contiguas memory allocation


>  var temp={'delhi':28,'agra':30};
. object->key value pair
> temp['delhi'];
> temp.delhi
< 28
< 28
> var dhoni={name:'ms dhoni',age:38,6:100,50:45,100:20,'perm adress':'dhoni address'};
. operator work with only string and onlo sepcial op string
. [] access both numeric and string key,work with dynamic key 
. ['y'](assosiative array)


loop ---->
------
for(var i=0;i<arr.length;i++){
    consol.log(element);
}
loop(for)is called loop besause we know the starting and ending point


itrator---->
--------
for(var element of arr)
{
    consol.log(element);
}
using for of loop we can traverse the arr 





for(let key in dhoni){
    consol.log(key,dhoni[key]);
}
usin for in loop we can traverse the object and arr besause in arr index is use as a key

for(var key in dhoni){
    consol.log(key,arr[key]);
}





. for of loop interduce in ES6

. for of loop traves the arr
. for in loop traves object


.wrapper object(type)---->
===================



primitives are not obj they have pure values.it does't







###################Class 3 ####### 11/3/23 ###########


 2. chrome canaey for dev 
 1.chromiun
 3.chrome 



 IQ- spreed operator
 IQ- immutability v/s mutability
 IQ - value typed v/s referance type
 IQ - can you null value type 
 IQ - null==undefined and null===undefined 
 IQ- == v/s ===


 type casting run time 


 u+n=NaN
 u+s=S
 null+n=N

code:->
------

var a ; // variable declare
undefined
typeof a;
'undefined'
a=10;
10
typeof a;
'number'
a= "Amit";
'Amit'
typeof a;
'string'
a = true;
true
typeof a;
'boolean'
var q = 543534534645654654654645645646456456n;
undefined
typeof q;
'bigint'
q + 6534645645645756n;
543534534645654654661180291292102212n
var a = 10;
undefined
a;
10
a + 10;
20
a;
10
a = a + 10;
20
var arr= [10,20,30,40,50];
undefined
var t  = arr;
undefined
t;
(5) [10, 20, 30, 40, 50]
t == arr;
true
t[0] = 11111;
11111
t;
(5) [11111, 20, 30, 40, 50]
arr;
(5) [11111, 20, 30, 40, 50]
arr;
(5) [11111, 20, 30, 40, 50]
var g = [...arr];
undefined
g;
(5) [11111, 20, 30, 40, 50]
g == arr;
false
g[0] =1;
1
g;
(5) [1, 20, 30, 40, 50]
arr;
(5) [11111, 20, 30, 40, 50]
typeof arr;
'object'
arr = [10, "Amit", true, [100,200],88n];
(5) [10, 'Amit', true, Array(2), 88n]
arr = null;
null
typeof arr;
'object'
var f = 10;
undefined
typeof f;
'number'
f = null;
null
typeof f;
'object'
f=0;
0
typeof f;

'number'
var g1 ;
undefined
typeof g1;
'undefined'
g1=444;
444
undefined == null;
true
10 == "10";
true
"Amit "+10
'Amit 10'
"10" + 20
'1020'
undefined + 10
NaN
null + 10
10
undefined == null;
true
undefined === null;
false
10 === "10"
false
10===10;
true
var emp = [1001, "Ram", 99999, 5555, 2222, 201000, "Delhi", "New Delhi", "A-11", 4444, 18, 24];
undefined
var emp = {id : 1001, name:"Ram", salary: 9999 };
undefined
emp.id;
1001
emp['id'];
1001
var e = Symbol();
undefined
typeof e;
'symbol'
e;
Symbol()
var gg = Symbol();
undefined
gg;
Symbol()
e == gg;
false



########## Class 4 ####### 12/03/23 ####################################################
SUNDAY
-------
shift+enter for multi line 
function show()//name of function
{
console.log("i am the show");
}
disp();
function disp(){
    console.log("i am disply");
}
hoisting place on top 


js is compile language
compoled+interpreted 

function output(){
    //var i;//hoisting 
    console.log("i am ",i);
    for(var i=0;i<=10;i++){
        console.log("I is ",i)
    }
    console.log("I is" ,i)
}
exidental global  variable 
khatam krne ka tarik global variable 'use strict';only start in starting 
window.open("url");global object is window 
window ==this;true
var h=10;global level hoisting pr window par attach ho jata h 
window.h;
10 
scoping is a compile time process
TDZ 
let de;lare multiple time 
var re intilidztion  
let window ke stah attach nhi hota 


############## class -5 ###### saturday  ##############################

  
function argument is optional in javascript{N-argument}

function show(){
    consol.log("t am show");
}

show();

show(1,2);

consol.dir(show())-> show the function directory 

js engine apply all left property of the function(soo many proprty )

argrments property ki help se haam number of argument pta kr skte h 

object base programing language and functional language 

class kyeword hota h but vo use function ki tarhe treet krta h sugger coted

parseInt(),parseFloat();

NaN is numeric number error value

isNaN(parseInt("yogi"));
true

isNaN(parseInt("10"));
false

 arr instanceof Array;
 true  // where Array is predefined function 

instanceof object ke sath hi chalega 




code-->
-----

var a ;
undefined

typeof a;
'undefined'

a=10;
10
typeof a;
'number'

a= "amit";
'amit'
typeof a;
'string'

a= true;
true
typeof a;
'boolean'

a = 10n;
10n
typeof a;
'bigint'

a = [];
[]
typeof a;
'object'

function show(){
    console.log("I am the Show ");
}

undefined//besauce no return type 

typeof show;
'function'

typeof console;
'object'

typeof log;
'undefined'

typeof console.log;
'function'

typeof show;
'function'

show();
VM323:2 I am the Show 
undefined//no return 

show(1,2);
VM323:2 I am the Show 
undefined//no return

show();
VM323:2 I am the Show 
undefined

show("Amit",22);
VM323:2 I am the Show 
undefined

show(1,2,3,4,6,);
VM323:2 I am the Show 
undefined

show(1,2,3,4,6,100,200);
VM323:2 I am the Show 
undefined

show(1,2,3,4,6,100,200, true, [], "ram");
VM323:2 I am the Show 
undefined

function show(){
    console.log("I am the Show ");
}
undefined

console.log("Hello JS ");
VM932:1 Hello JS 
undefined

console.dir(show);// dir are used to show all directory

VM980:1 ƒ show() 
           arguments: null
            caller: null
            length: 0
            name: "show"
            prototype: constructor: ƒ 
            show()[[Prototype]]: Objectconstructor: ƒ 
            Object()hasOwnProperty: ƒ 
            hasOwnProperty()isPrototypeOf: ƒ 
            isPrototypeOf()propertyIsEnumerable: ƒ 
            propertyIsEnumerable()toLocaleString: ƒ 
            toLocaleString()toString: ƒ 
            toString()valueOf: ƒ 
            valueOf()__defineGetter__: ƒ
             __defineGetter__()__defineSetter__: ƒ 
             __defineSetter__()__lookupGetter__: ƒ 
             __lookupGetter__()__lookupSetter__: ƒ
              __lookupSetter__()__proto__: (...)get __proto__: ƒ 
              __proto__()set __proto__: ƒ 
              __proto__()[[FunctionLocation]]: VM827:1[[Prototype]]: ƒ ()[[Scopes]]: Scopes[1]
undefined

function show(){
    console.log('Arguments ', arguments.length);
}
undefined

show();
VM1218:2 Arguments  0
undefined

show(10,20);
VM1218:2 Arguments  2
undefined

show(10,20,30);
VM1218:2 Arguments  3
undefined

show(10,20,30,40);
VM1218:2 Arguments  4
undefined

show(10,20,30,40,50);
VM1218:2 Arguments  5
undefined

class W{
    // w is a function it is sugger coting 
}
undefined
typeof W;
'function'

function add(){
    console.log(arguments.length);
}
undefined

add();

VM1557:2 0
undefined

add(1,20);
VM1557:2 2
undefined


function add(){
    //console.log(arguments.length);
    var sum = 0;
    for(var i= 0 ; i<arguments.length; i++){
        sum = sum + arguments[i];
    }
    return sum;
}
undefined

Test case-->
------

add();
0

add(1,2);
3

add(1,2,3,4,5);
15

add(1,"two", "three", "four","5");
'1twothreefour5'
1 + "two"
'1two'

parseInt("10")
10

parseInt("10.20");
10

parseFloat("10.20");
10.2

parseInt("Amit");
NaN
NaN + 10;
NaN


function add(){
    //console.log(arguments.length);
    var sum = 0;
    for(var i= 0 ; i<arguments.length; i++){
        sum = sum + parseInt(arguments[i]);
    }
    return sum;
}
undefined

add(1,"two", "three", "four","5");
NaN

isNaN(parseInt("Amit"));
true

isNaN(parseInt("10"));
false

function add(){
    //console.log(arguments.length);
    var sum = 0;
    for(var i= 0 ; i<arguments.length; i++){
        var result = isNaN(parseInt(arguments[i]));
        sum = sum + ;
    }
    return sum;
}
VM2640:6 Uncaught SyntaxError: Unexpected token ';'

function add(){
    //console.log(arguments.length);
    var sum = 0;
    for(var i= 0 ; i<arguments.length; i++){
        var result = isNaN(parseInt(arguments[i]));
        if(result == true){
            sum = sum + 0;
        }
        else{
        sum = sum + parseInt(arguments[i]);
        }
    }
    return sum;
}
undefined

add(1,"two", "three", "four","5");
6

function add(){
    //console.log(arguments.length);
    var sum = 0;
    for(var i= 0 ; i<arguments.length; i++){
        
        sum = sum + (isNaN(parseInt(arguments[i]))?0:parseInt(arguments[i]));
        
    }
    return sum;
}
undefined

add(1,"two", "three", "four","5");
6

var arr = [10,20,30];
undefined

typeof arr;
'object'

typeof console;
'object'

arr instanceof Array;
true

function add(){
    //console.log(arguments.length);
    var sum = 0;
    for(var i= 0 ; i<arguments.length; i++){
        if(arguments[i] instanceof Array){
            for(var j = 0; j<arguments[i].length; j++){
                sum = sum + arguments[i][j];
            }
        } else{
        sum = sum + (isNaN(parseInt(arguments[i]))?0:parseInt(arguments[i]));
        }
        
    }
    return sum;
}
undefined

add(1,"2",[3,4]);
10

add(1,"2",["3",4]);
'334'

function add(){
    //console.log(arguments.length);
    var sum = 0;
    for(var i= 0 ; i<arguments.length; i++){
        if(arguments[i] instanceof Array){
            for(var j = 0; j<arguments[i].length; j++){
                sum = sum + parseInt(arguments[i][j]);
            }
        } else{
        sum = sum + (isNaN(parseInt(arguments[i]))?0:parseInt(arguments[i]));
        }
        
    }
    return sum;
}
undefined

add(1,"2",["3",4]);
10

add(1,"2",["3",4, "amit"]);
NaN

function add(){
    //console.log(arguments.length);
    var sum = 0;
    for(var i= 0 ; i<arguments.length; i++){
        if(arguments[i] instanceof Array){
            for(var j = 0; j<arguments[i].length; j++){
                sum = sum + (isNaN(parseInt(arguments[i][j]))?0:parseInt(arguments[i][j]) );
            }
        } else{
        sum = sum + (isNaN(parseInt(arguments[i]))?0:parseInt(arguments[i]));
        }
        
    }
    return sum;
}
undefined

add(1,"2",["3",4, "amit"]);
10

function one(){
    return 1;
}
undefined

function two(){
return "2";
}
undefined

function add(){
    //console.log(arguments.length);
    var sum = 0;
    for(var i= 0 ; i<arguments.length; i++){
        if(arguments[i] instanceof Array){
            for(var j = 0; j<arguments[i].length; j++){
                sum = sum + (isNaN(parseInt(arguments[i][j]))?0:parseInt(arguments[i][j]) );
            }
        } else if (typeof arguments[i]==='function'){
           arguments[i] = arguments[i]();
             sum = sum + (isNaN(parseInt(arguments[i]))?0:parseInt(arguments[i]));
        }
        else {
             sum = sum + (isNaN(parseInt(arguments[i]))?0:parseInt(arguments[i]));
        }
        
    }
    return sum;
}
undefined

add(1,"2",["3",4, "amit"]);
10

add(1,"2",["3",4, "amit"], one, two);
13

one();
1

two();
'2'

 var r = [10,20];
undefined

typeof r;
'object'

r instanceof Array;
true

typeof Array;
'function'

function disp(){
    console.log("I am Disp ");
}
undefined

typeof disp;
'function'

disp();
VM4386:2 I am Disp 
undefined

var t = new disp();
VM4386:2 I am Disp 
undefined

t;
disp {}
typeof t;
'object'

t instanceof disp;
true

typeof disp;
'function'

function jQuery(){
    console.log('JQuery call ', arguments.length);
}
undefined

jQuery(this);l
VM4782:2 JQuery call  1
VM4819:1 Uncaught ReferenceError: l is not defined
    at <anonymous>:1:14
(anonymous) @ VM4819:1

jQuery(this);
VM4782:2 JQuery call  1
undefined

jQuery(document);
VM4782:2 JQuery call  1
undefined

var $ = jQuery;
undefined

typeof $;
'function'
$;

ƒ jQuery(){
    console.log('JQuery call ', arguments.length);
}

$(this);
VM4782:2 JQuery call  1
undefined

$(document);
VM4782:2 JQuery call  1
undefined

$("#p");
VM4782:2 JQuery call  1
undefined

______________________________________________________________________________________________

Function`s 
__________

. function is block of code that perform a specific task.dividing a cpplex problem into a smaller chunks makes your program easy to understand
and reusable.The syntax of funtion is as follows--->>
function nameoffunction(parametar1,perametar2,...perametarn){
    body of function.....
    return something;
}




###################### Class 6 ######### sunday ########################################


type of function js->
-------------------

function programming artical

window-tab
document -page
name function 
unname or anonymous or function expression
return last expression only
event handling we can use anonymous function 
{}object literl 
var a=10; numeric literl
NFE named function expression 

interview question 

function disp(){
    console.log("I am the Disp Function ");
    return "Hello";
}
undefined
disp();
VM258:2 I am the Disp Function 
'Hello'
function disp(var t , var y){
    var a = 10;
    a = a + t + y;
    console.log("I am the Disp Function ");
    return "Hello "+a;
}
VM379:1 Uncaught SyntaxError: Unexpected token 'var'
function disp( t ,  y){
    var a = 10;
    a = a + t + y;
    console.log("I am the Disp Function ");
    return "Hello "+a;
}
undefined
disp(10,20);
VM391:4 I am the Disp Function 
'Hello 40'
show();
function show(){
    console.log("I am the Show ");
}
VM608:3 I am the Show 
undefined
window;
Window {window: Window, self: Window, document: document, name: '', location: Location, …}
window.show;
ƒ show(){
    console.log("I am the Show ");
}
show; // window.show
ƒ show(){
    console.log("I am the Show ");
}
var a = 10;
undefined
window.a;
10
function calc(){
    var add = function(x,y){
        return x + y;
    }
    var subtract=function(x,y){
        return x -y;
    }
    return add, subtract;
}
undefined
calc();
ƒ (x,y){
        return x -y;
    }
function calc(){
    var add = function(x,y){
        return x + y;
    }
    var subtract=function(x,y){
        return x -y;
    }
    return [add, subtract];
}
undefined
calc()
(2) [ƒ, ƒ]
calc()[0](10,20);
30
function calc(){
    var add = function(x,y){
        return x + y;
    }
    var subtract=function(x,y){
        return x -y;
    }
    return {"addition" : add, "subtraction ": subtract};
}
undefined
var e = calc();
undefined
typeof e;
'object'
e.addition(10,2);
12
e.subtraction(10,2);
VM1492:1 Uncaught TypeError: e.subtraction is not a function
    at <anonymous>:1:3
(anonymous) @ VM1492:1
e;
{addition: ƒ, "subtraction ": ƒ}addition: ƒ (x,y)arguments: nullcaller: nulllength: 2name: "add"prototype: {constructor: ƒ}[[FunctionLocation]]: VM1370:2[[Prototype]]: ƒ ()[[Scopes]]: Scopes[1]"subtraction ": ƒ (x,y)[[Prototype]]: Object
function calc(){
    var add = function(x,y){
        return x + y;
    }
    var subtract=function(x,y){
        return x -y;
    }
    return {"addition" : add, "subtraction": subtract};
}
undefined
e.subtraction(10,2);
VM1552:1 Uncaught TypeError: e.subtraction is not a function
    at <anonymous>:1:3
(anonymous) @ VM1552:1
var e = calc();
undefined
e.subtraction(10,2);
8
function calc(){
    var add = function(x,y){
        return x + y;
    }
    var subtract=function(x,y){
        return x -y;
    }
    return {"add two" : add, "subtraction": subtract};
}
undefined
e.subtraction(10,2);
8
var e = calc();
undefined
e.add two(10,2);
VM1727:1 Uncaught SyntaxError: Unexpected identifier 'two'
e.['add two'](10,2);
VM1768:1 Uncaught SyntaxError: Unexpected token '['
e['add two'](10,2);
12
function calc(){
    var add = function(x,y){
        return x + y;
    }
    var subtract=function(x,y){
        return x -y;
    }
    return {"add two" : add, "_subtraction": subtract};
}
undefined
var e = calc();
undefined
e['_subtraction'](10,2);
8
e._subtraction(10,2);
8
function calc(){
    var add = function(x,y){
        return x + y;
    }
    var subtract=function(x,y){
        return x -y;
    }
    return {"add two" : add, "sub-traction": subtract};
}
undefined
var e = calc();
undefined
e.sub-traction(10,2);
VM1955:1 Uncaught ReferenceError: traction is not defined
    at <anonymous>:1:3
(anonymous) @ VM1955:1
e['sub-traction'](10,2);
8
var t = 'sub-traction';
undefined
e[t](100,200);
-100
e.t(100,200);
VM2170:1 Uncaught TypeError: e.t is not a function
    at <anonymous>:1:3
(anonymous) @ VM2170:1
function calc(){
    var add = function add(x,y){
        return x + y;
    }
    var subtract=function sub(x,y){
        return x -y;
    }
    return [add, subtract];
}
undefined
calc();
(2) [ƒ, ƒ]0: ƒ add(x,y)1: ƒ sub(x,y)length: 2[[Prototype]]: Array(0)
calc()[0](10,20);
30
test();
function test(){
console.log("I am the Test ");
}
VM2541:3 I am the Test 
undefined
// var w ;
console.log(w);
var w = 100;
VM2629:2 undefined
undefined
w;
100
output();
var output = function(){
    console.log("Function Expression ");
}
VM2788:1 Uncaught TypeError: output is not a function
    at <anonymous>:1:1
(anonymous) @ VM2788:1


next topic are Arrow function 
